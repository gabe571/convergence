[{"/Users/gabrielcastro/Development/code/React/convergence/src/index.js":"1","/Users/gabrielcastro/Development/code/React/convergence/src/App.js":"2"},{"size":220,"mtime":1610488353573,"results":"3","hashOfConfig":"4"},{"size":1589,"mtime":1610488701719,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1tzqe6j",{"filePath":"9","messages":"10","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/gabrielcastro/Development/code/React/convergence/src/index.js",[],["12","13"],"/Users/gabrielcastro/Development/code/React/convergence/src/App.js",["14","15","16"],"import React, { useState, useEffect } from 'react'\n\n\nexport default function App() {\n\n  const [races, setRaces] = useState('races')\n  const [items, setItems] = useState([])\n  const [classes, setClasses] = useState('classes')\n  const [className, setClassNames] = useState([])\n  const [specializations, setSpecializations] = useState('specializations')\n  const [specs, setSpecs] = useState([])\n \n\n  useEffect(() => {\n  fetch(`https://us.api.blizzard.com/data/wow/playable-race/index?namespace=static-us&locale=en_US&access_token=US02EuGg12ws0BgdyhjHJsnTRMWXsZNHIw`)\n  .then(response => response.json())\n  .then(json => setItems(json.races))\n  },[races]) \n\n   useEffect(() => {\n      fetch(`https://us.api.blizzard.com/data/wow/playable-class/index?namespace=static-us&locale=en_US&access_token=US02EuGg12ws0BgdyhjHJsnTRMWXsZNHIw`)\n      .then(response => response.json())\n      .then(json => setClassNames(json.classes))\n      },[classes]) \n\n  useEffect(() => {\n    fetch(`https://us.api.blizzard.com/data/wow/playable-specialization/index?namespace=static-us&locale=en_US&access_token=US02EuGg12ws0BgdyhjHJsnTRMWXsZNHIw`)\n    .then(response => response.json())\n    .then(json => setSpecs(json.character_specializations))\n    },[specializations])\n    \n  return (\n  <div>\n   <div>\n  {items.map(item => {\n return <pre key={item.id}>\n  Race: {item.name}\n</pre>\n})}\n </div>\n <div>\n  {className.map(cl => {\n return <pre key={cl.id}>\n  Class: {cl.name}\n</pre>\n})}\n </div>\n<div>\n  {specs.map(spec => {\n return <pre key={spec.id}>\n  Specialization: {spec.name}\n</pre>\n})}\n</div>\n   </div> \n   )\n  }\n",{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","severity":1,"message":"22","line":6,"column":17,"nodeType":"23","messageId":"24","endLine":6,"endColumn":25},{"ruleId":"21","severity":1,"message":"25","line":8,"column":19,"nodeType":"23","messageId":"24","endLine":8,"endColumn":29},{"ruleId":"21","severity":1,"message":"26","line":10,"column":27,"nodeType":"23","messageId":"24","endLine":10,"endColumn":45},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'setRaces' is assigned a value but never used.","Identifier","unusedVar","'setClasses' is assigned a value but never used.","'setSpecializations' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]